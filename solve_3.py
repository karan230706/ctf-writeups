from sympy import nextprime, prevprime
from math import prod
from Crypto.Util.number import inverse, long_to_bytes

# Given values
N_given = 34546497157207880069779144631831207265231460152307441189118439470134817451040294541962595051467936974790601780839436065863454184794926578999811185968827621504669046850175311261350438632559611677118618395111752688984295293397503841637367784035822653287838715174342087466343269494566788538464938933299114092019991832564114273938460700654437085781899023664719672163757553413657400329448277666114244272477880443449956274432819386599220473627937756892769036756739782458027074917177880632030971535617166334834428052274726261358463237730801653954955468059535321422372540832976374412080012294606011959366354423175476529937084540290714443009720519542526593306377

ct = 32130352215164271133656346574994403191937804418876038099987899285740425918388836116548661879290345302496993945260385667068119439335225069147290926613613587179935141225832632053477195949276266017803704033127818390923119631817988517430076207710598936487746774260037498876812355794218544860496013734298330171440331211616461602762715807324092281416443801588831683678783343566735253424635251726943301306358608040892601269751843002396424155187122218294625157913902839943220894690617817051114073999655942113004066418001260441287880247349603218620539692362737971711719433735307458772641705989685797383263412327068222383880346012169152962953918108171850055943194

e = 65537
known_prime = 242444312856123694689611504831894231099

# Try to reconstruct the prime list both forward and backward
primes = [known_prime]

# Expand forward
p = known_prime
while True:
    p = nextprime(p)
    if N_given % p == 0:
        primes.append(p)
        continue
    break

# Expand backward
p = known_prime
while True:
    p = prevprime(p)
    if N_given % p == 0:
        primes.insert(0, p)
        continue
    break

# Multiply all collected primes to see if matches N
N_reconstructed = prod(primes)

if N_reconstructed != N_given:
    print("[‚ùå] Failed to reconstruct N correctly.")
else:
    print("[‚úÖ] Successfully reconstructed N with", len(primes), "primes.")

    # Calculate phi(N)
    phi = 1
    for q in primes:
        phi *= (q - 1)

    # Compute private exponent
    d = inverse(e, phi)

    # Decrypt
    pt = pow(ct, d, N_given)
    flag = long_to_bytes(pt)
    print("[üéâ] FLAG:", flag.decode(errors='replace'))  # `replace` to avoid decode errors
